function [ dlr1d2ds, dlr1d2dtheta] = derRopeLength( params, s, theta, sd, thetad)
% Calculate first derivatives of lr1d2 = (d/dt lr1)^2
% Output:
%   dlr1d2ds        Derivative of dot(lr1)^2 wrt s
%   dlr1d2dtheta    Derivative of dot(lr1)^2 wrt theta

phi = params.ang_base;

% Z is the numerator of lr1d2
Z = (s+params.l5)^2 * sd^2 - 2*(s+params.l5) * sd^2 * params.l2*cos(phi-theta) ...
    - 2*(s+params.l5)^2 *sd * thetad * params.l2 * sin(phi - theta) ...
    + params.l2^2 * sd^2 * cos(phi-theta)^2 + 2*params.l2^2*(s+params.l5) * sd * thetad * cos(phi-theta) * sin(phi-theta) ...
    + params.l2^2 * (s+params.l5)^2 * thetad^2 * sin(phi-theta)^2;

% N is the denominator of lr1de
N = params.l2^2 + (s+params.l5)^2 - 2*params.l2*(s+params.l5) * cos(phi-theta);

%Derivative of dot(lr1)^2 wrt s
dlr1d2ds = ((2*(s+params.l5)*sd^2 - 2*sd^2*params.l2 * cos(phi-theta) - ...
    4*(s+params.l5) * sd * thetad * params.l2 * sin(phi-theta) ...
    + 2*params.l2^2 * sd * thetad * cos(phi-theta) * sin(phi-theta) + 2 * ...
    params.l2^2 * (s+params.l5) * thetad^2 * sin(phi-theta)^2) * N ...
    - Z * (2*(s+params.l5) - 2*params.l2 * cos(phi-theta))) / N^2;

%Derivative of dot(lr1)^2 wrt theta
dlr1d2dtheta = ((-2*(s+params.l5) * sd^2 * params.l2 * sin(phi-theta) + 2*(s+params.l5)^2 * ...
    sd * thetad * params.l2 * cos(phi-theta) + 2*params.l2^2 * sd^2 * cos(phi-theta) * sin(phi-theta) ... 
    + 2*params.l2^2*(s+params.l5) * sd * thetad * sin(phi-theta)^2 ...
    - 2*params.l2^2*(s+params.l5) * sd * thetad * cos(phi-theta)^2 ...
    - 2*params.l2^2*(s+params.l5)^2 * thetad^2 * sin(phi-theta) * cos(phi-theta)) * N ...
    - Z * (-2*params.l2*(s+params.l5) * sin(phi-theta))) / N^2;

end
